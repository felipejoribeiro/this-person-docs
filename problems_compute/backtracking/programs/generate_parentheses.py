from typing import List


class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        sequence = [["()"]]
        if n == 0:
            return []

        for i in range(1, n):
            cur_step = []
            for ii in range(1, i + 1):
                step_from = sequence[ii - 1]
                lack = int(i + 1 - len(step_from[0]) / 2)
                for element in step_from:
                    cur_step.append(lack * "(" + element + lack * ")")
                    for particle in sequence[lack - 1]:
                        cur_step.append(particle + element)
                        cur_step.append(element + particle)

            sequence.append(list(set(cur_step.copy())))

        return sequence[-1]


if __name__ == "__main__":
    s = Solution()
    result = [
        "(((((())))))",
        "((((()()))))",
        "((((())())))",
        "((((()))()))",
        "((((())))())",
        "((((()))))()",
        "(((()(()))))",
        "(((()()())))",
        "(((()())()))",
        "(((()()))())",
        "(((()())))()",
        "(((())(())))",
        "(((())()()))",
        "(((())())())",
        "(((())()))()",
        "(((()))(()))",
        "(((()))()())",
        "(((()))())()",
        "(((())))(())",
        "(((())))()()",
        "((()((()))))",
        "((()(()())))",
        "((()(())()))",
        "((()(()))())",
        "((()(())))()",
        "((()()(())))",
        "((()()()()))",
        "((()()())())",
        "((()()()))()",
        "((()())(()))",
        "((()())()())",
        "((()())())()",
        "((()()))(())",
        "((()()))()()",
        "((())((())))",
        "((())(()()))",
        "((())(())())",
        "((())(()))()",
        "((())()(()))",
        "((())()()())",
        "((())()())()",
        "((())())(())",
        "((())())()()",
        "((()))((()))",
        "((()))(()())",
        "((()))(())()",
        "((()))()(())",
        "((()))()()()",
        "(()(((()))))",
        "(()((()())))",
        "(()((())()))",
        "(()((()))())",
        "(()((())))()",
        "(()(()(())))",
        "(()(()()()))",
        "(()(()())())",
        "(()(()()))()",
        "(()(())(()))",
        "(()(())()())",
        "(()(())())()",
        "(()(()))(())",
        "(()(()))()()",
        "(()()((())))",
        "(()()(()()))",
        "(()()(())())",
        "(()()(()))()",
        "(()()()(()))",
        "(()()()()())",
        "(()()()())()",
        "(()()())(())",
        "(()()())()()",
        "(()())((()))",
        "(()())(()())",
        "(()())(())()",
        "(()())()(())",
        "(()())()()()",
        "(())(((())))",
        "(())((()()))",
        "(())((())())",
        "(())((()))()",
        "(())(()(()))",
        "(())(()()())",
        "(())(()())()",
        "(())(())(())",
        "(())(())()()",
        "(())()((()))",
        "(())()(()())",
        "(())()(())()",
        "(())()()(())",
        "(())()()()()",
        "()((((()))))",
        "()(((()())))",
        "()(((())()))",
        "()(((()))())",
        "()(((())))()",
        "()((()(())))",
        "()((()()()))",
        "()((()())())",
        "()((()()))()",
        "()((())(()))",
        "()((())()())",
        "()((())())()",
        "()((()))(())",
        "()((()))()()",
        "()(()((())))",
        "()(()(()()))",
        "()(()(())())",
        "()(()(()))()",
        "()(()()(()))",
        "()(()()()())",
        "()(()()())()",
        "()(()())(())",
        "()(()())()()",
        "()(())((()))",
        "()(())(()())",
        "()(())(())()",
        "()(())()(())",
        "()(())()()()",
        "()()(((())))",
        "()()((()()))",
        "()()((())())",
        "()()((()))()",
        "()()(()(()))",
        "()()(()()())",
        "()()(()())()",
        "()()(())(())",
        "()()(())()()",
        "()()()((()))",
        "()()()(()())",
        "()()()(())()",
        "()()()()(())",
        "()()()()()()",
    ]
    response = s.generateParenthesis(6)
    for r in result:
        if r not in response:
            print(f"Missing: {r}")
